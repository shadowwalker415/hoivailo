import { Request, Response, NextFunction } from "express";
import CustomError from "../errors/customError";
import ValidationError from "../errors/validationError";
import EntityNotFoundError from "../errors/entityNotFoundError";
import InternalServerError from "../errors/internalServerError";

const getErrorMessage = (error: unknown): string => {
  if (
    error instanceof Error ||
    error instanceof CustomError ||
    error instanceof ValidationError ||
    error instanceof EntityNotFoundError ||
    error instanceof InternalServerError
  ) {
    return error.message;
  }
  if (error && typeof error === "object" && "message" in error) {
    return String(error.message).toString();
  }
  if (typeof error === "string") {
    return error;
  }
  if (error instanceof String) {
    return error.toString();
  }
  return "An unknown error occured";
};

// Handling errors generated by mongoose
export const databaseErrorHandler = (
  error: unknown,
  _req: Request,
  res: Response,
  next: NextFunction
) => {
  // Checking if the error was raised due to duplicate record
  if (
    error instanceof Error &&
    error.message.startsWith("E11000 duplicate key error collection")
  ) {
    res.status(500).send({
      success: false,
      status: 500,
      message: "Appoinment already exist"
    });
    // Checking if the error was raised due to error in field validation
  } else if (
    error instanceof Error &&
    error.message.startsWith("Appointment validation failed")
  ) {
    next(
      new ValidationError({
        message: "Name must be at least 3 characters long",
        statusCode: 400,
        code: "VALIDATION_ERROR"
      })
    );
  } else {
    next(error);
  }
};

// Handling errors of all classes
export const generalErrorHandler = (
  error: unknown,
  _req: Request,
  res: Response,
  next: NextFunction
) => {
  if (
    error instanceof CustomError ||
    error instanceof EntityNotFoundError ||
    error instanceof ValidationError ||
    error instanceof InternalServerError
  ) {
    res.status(error.statusCode).send({
      success: false,
      code: error.statusCode,
      message: getErrorMessage(error)
    });
  } else if (error instanceof Error) {
    res.status(400).send({
      success: false,
      code: 400,
      message: getErrorMessage(error)
    });
  } else {
    next(error);
  }
};

export const unknownEndPoint = (_req: Request, res: Response) => {
  res.status(404).send({ error: "Unknown endpoint" });
};
